/** Declaration file generated by dts-gen */

export = ioredis_mock;

declare class ioredis_mock {
    constructor(...args: any[]);

    createConnectedClient(...args: any[]): any;

    exec(callback: any): any;

    multi(...args: any[]): any;

    pipeline(...args: any[]): any;

    static defaultMaxListeners: number;

    static init(): void;

    static listenerCount(emitter: any, type: any): any;

    static once(emitter: any, name: any): any;

    static usingDomains: boolean;

}

declare namespace ioredis_mock {
    class EventEmitter {
        constructor();

        addListener(type: any, listener: any): any;

        emit(type: any, args: any): any;

        eventNames(): any;

        getMaxListeners(): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        off(type: any, listener: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any): any;

        prependListener(type: any, listener: any): any;

        prependOnceListener(type: any, listener: any): any;

        rawListeners(type: any): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

    class Promise {
        constructor(p0: any);

        // Native method; no parameter or return type inference available
        catch(p0: any): any;

        // Native method; no parameter or return type inference available
        finally(p0: any): any;

        // Native method; no parameter or return type inference available
        then(p0: any, p1: any): any;

        static all(p0: any): any;

        static race(p0: any): any;

        static reject(p0: any): any;

        static resolve(p0: any): any;

    }

}

